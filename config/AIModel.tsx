const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_CLIENT_ID;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });
  
    export const GenAICode = model.startChat({
      generationConfig: CodeGenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a to do app:Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n  \n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"Advanced To-Do App\",\n  \"explanation\": \"This project implements a comprehensive to-do application using React and Tailwind CSS, enhanced with date formatting using date-fns, charts using react-chartjs-2, and icons from lucide-react. The application features task management with creation, editing, completion, and deletion functionalities, including a beautiful and user-friendly interface, and task prioritization, data persistence. The project is structured into components for task lists, task creation, task details, task chart, task filtering, statistics, and a navigation bar, showcasing a well-organized and production-ready project.  All components are in separeate folder\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TaskList from './components/TaskList/TaskList';\\nimport Header from './components/Header/Header';\\nimport AddTask from './components/AddTask/AddTask';\\nimport TaskChart from './components/TaskChart/TaskChart';\\nimport TaskStatistics from './components/TaskStatistics/TaskStatistics'\\nimport { useState } from 'react';\\n\\nfunction App() {\\n   const [tasks, setTasks] = useState(() => {\\n    const storedTasks = localStorage.getItem('tasks');\\n    return storedTasks ? JSON.parse(storedTasks) : [];\\n});\\n\\n\\nconst addTask = (newTask) => {\\n    const updatedTasks = [...tasks, newTask];\\n    setTasks(updatedTasks);\\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\\n  };\\n\\nconst deleteTask = (id) => {\\n  const updatedTasks = tasks.filter((task) => task.id !== id);\\n  setTasks(updatedTasks);\\n  localStorage.setItem('tasks', JSON.stringify(updatedTasks));\\n};\\n\\n  const toggleTaskStatus = (id) => {\\n    const updatedTasks = tasks.map(task =>\\n      task.id === id ? { ...task, completed: !task.completed } : task\\n    );\\n     setTasks(updatedTasks);\\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\\n  };\\n\\n  const editTask = (id, updatedTask) => {\\n  const updatedTasks = tasks.map(task =>\\n    task.id === id ? { ...task, ...updatedTask } : task\\n  );\\n   setTasks(updatedTasks);\\n  localStorage.setItem('tasks', JSON.stringify(updatedTasks));\\n};\\n\\n   \\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen font-sans\\\">\\n      <Header />\\n       <div className=\\\"container mx-auto px-4 py-8\\\">\\n          <AddTask onAddTask={addTask} />\\n           <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\\n            <div>\\n               <TaskList tasks={tasks} onToggleTask={toggleTaskStatus} onDeleteTask={deleteTask} onEditTask={editTask} />\\n            </div>\\n            <div>\\n               <TaskChart tasks={tasks} />\\n            </div>\\n          </div>\\n            <TaskStatistics tasks={tasks} />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\n       \"generatedFiles\": []\n    },\n    \"/components/Header/Header.js\": {\n        \"code\": \"import React from 'react';\\nimport { Home } from 'lucide-react';\\n\\nfunction Header() {\\n  return (\\n    <header className=\\\"bg-blue-600 py-4 text-white shadow-md\\\">\\n      <div className=\\\"container mx-auto px-4 flex items-center justify-between\\\">\\n         <div className=\\\"flex items-center\\\">\\n         <Home className=\\\"h-6 w-6 mr-2\\\" />\\n            <h1 className=\\\"text-2xl font-semibold\\\">To-Do App</h1>\\n         </div>\\n        <nav>\\n          <ul className=\\\"flex space-x-6\\\">\\n           <li><a href=\\\"#\\\" className=\\\"hover:text-gray-200\\\">Home</a></li>\\n           <li><a href=\\\"#\\\" className=\\\"hover:text-gray-200\\\">About</a></li>\\n           <li><a href=\\\"#\\\" className=\\\"hover:text-gray-200\\\">Contact</a></li>\\n          </ul>\\n        </nav>\\n      </div>\\n    </header>\\n  );\\n}\\n\\nexport default Header;\\n\"\n       \n    },\n    \"/components/TaskList/TaskList.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\n\\nfunction TaskList({ tasks, onToggleTask, onDeleteTask, onEditTask }) {\\n const [editTaskId, setEditTaskId] = useState(null);\\n  const [editedTaskText, setEditedTaskText] = useState('');\\n    const [editedTaskDescription, setEditedTaskDescription] = useState('');\\n const [editedTaskDueDate, setEditedTaskDueDate] = useState('');\\n const handleEdit = (task) => {\\n    setEditTaskId(task.id);\\n    setEditedTaskText(task.text);\\n     setEditedTaskDescription(task.description);\\n     setEditedTaskDueDate(task.dueDate)\\n  };\\n  const handleSaveEdit = (id) => {\\n  onEditTask(id, { text: editedTaskText,description: editedTaskDescription, dueDate: editedTaskDueDate });\\n  setEditTaskId(null);\\n};\\n  const handleCancelEdit = () => {\\n    setEditTaskId(null);\\n    setEditedTaskText('');\\n    setEditedTaskDescription('');\\n    setEditedTaskDueDate('');\\n  };\\n\\n  return (\\n    <div className=\\\"bg-white shadow rounded p-4\\\">\\n        <h2 className='text-xl font-semibold mb-4'>Task List</h2>\\n      {tasks.length === 0 ? (\\n        <p className='text-gray-600 text-center'>No tasks added yet. Add a task</p>\\n      ) : (\\n        <ul>\\n          {tasks.map((task) => (\\n            <li key={task.id} className={`flex justify-between items-center p-2 border-b border-gray-200 ${task.completed ? 'bg-green-100' : ''}`}>\\n              {editTaskId === task.id ? (\\n                <div className='w-full flex-grow space-y-2'>\\n                   <input\\n                    type=\\\"text\\\"\\n                    className='w-full p-2 border border-gray-300 rounded'\\n                    value={editedTaskText}\\n                    onChange={(e) => setEditedTaskText(e.target.value)}\\n                  />\\n                    <textarea\\n                      className=\\\"w-full p-2 border border-gray-300 rounded\\\" rows=\\\"2\\\"\\n                      placeholder=\\\"Task Description\\\"\\n                      value={editedTaskDescription}\\n                      onChange={(e) => setEditedTaskDescription(e.target.value)}\\n                    ></textarea>\\n                    <input\\n                      type=\\\"date\\\"\\n                      className=\\\"w-full p-2 border border-gray-300 rounded\\\"\\n                      value={editedTaskDueDate}\\n                      onChange={(e) => setEditedTaskDueDate(e.target.value)}\\n                    />\\n                  <div className='flex justify-end'>\\n                   <button onClick={() => handleSaveEdit(task.id)} className='bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-2 rounded mr-2'><Check className=\\\"h-4 w-4\\\" /></button>\\n                    <button onClick={handleCancelEdit} className='bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-2 rounded'><X className=\\\"h-4 w-4\\\" /></button>\\n                  </div>\\n                </div>\\n              ) : (\\n                <div className='w-full flex-grow flex flex-col'>\\n                 <span className={`text-lg ${task.completed ? 'line-through text-gray-500' : ''}`}>\\n                     {task.text}\\n                  </span>\\n                  <p className={`text-gray-500 text-sm ${task.completed ? 'line-through' : ''}`}>{task.description}</p>\\n                     <p className={`text-gray-500 text-sm ${task.completed ? 'line-through' : ''}`}>Due Date:{task.dueDate ? format(new Date(task.dueDate),'MM/dd/yyyy') : 'No Date' }</p>\\n                </div>\\n              )}\\n              <div className=\\\"flex space-x-2\\\">\\n                  <button onClick={() => onToggleTask(task.id)} className={`bg-green-500 hover:bg-green-600 text-white font-bold py-1 px-2 rounded ${task.completed ? 'opacity-50' : ''}`} disabled={task.completed}><Check className=\\\"h-4 w-4\\\"/></button>\\n                  <button onClick={() => handleEdit(task)} className='bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-1 px-2 rounded'><Edit className=\\\"h-4 w-4\\\" /></button>\\n                  <button onClick={() => onDeleteTask(task.id)} className='bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-2 rounded'><Trash className=\\\"h-4 w-4\\\" /></button>\\n              </div>\\n            </li>\\n          ))}\\n        </ul>\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default TaskList;\\n\",\n       \"generatedFiles\": []\n    },\n       \"/components/AddTask/AddTask.js\": {\n      \"code\":\"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\nimport { v4 as uuidv4 } from 'uuid';\\n\\nfunction AddTask({ onAddTask }) {\\n  const [newTaskText, setNewTaskText] = useState('');\\n  const [newTaskDescription, setNewTaskDescription] = useState('');\\n  const [newTaskDueDate, setNewTaskDueDate] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (!newTaskText.trim()) {\\n       alert('Please enter a task name');\\n      return;\\n    }\\n\\n    const newTask = {\\n      id: uuidv4(),\\n      text: newTaskText,\\n       description: newTaskDescription,\\n        dueDate: newTaskDueDate,\\n      completed: false,\\n    };\\n    onAddTask(newTask);\\n    setNewTaskText('');\\n    setNewTaskDescription('');\\n    setNewTaskDueDate('')\\n  };\\n\\n  return (\\n    <div className=\\\"bg-white shadow rounded p-4 mb-4\\\">\\n      <h2 className=\\\"text-xl font-semibold mb-4\\\">Add New Task</h2>\\n      <form onSubmit={handleSubmit} className=\\\"flex flex-col space-y-4\\\">\\n        <input\\n          type=\\\"text\\\"\\n          className=\\\"w-full p-2 border border-gray-300 rounded\\\"\\n          placeholder=\\\"Task Name\\\"\\n          value={newTaskText}\\n          onChange={(e) => setNewTaskText(e.target.value)}\\n        />\\n          <textarea\\n          className=\\\"w-full p-2 border border-gray-300 rounded\\\" rows=\\\"2\\\"\\n          placeholder=\\\"Task Description\\\"\\n          value={newTaskDescription}\\n          onChange={(e) => setNewTaskDescription(e.target.value)}\\n        ></textarea>\\n         <input\\n            type=\\\"date\\\"\\n            className=\\\"w-full p-2 border border-gray-300 rounded\\\"\\n            value={newTaskDueDate}\\n            onChange={(e) => setNewTaskDueDate(e.target.value)}\\n          />\\n          <button type='submit' className='bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 rounded flex justify-center items-center'><Plus className='h-5 w-5 mr-2'/> Add Task</button>\\n      </form>\\n    </div>\\n  );\\n}\\n\\nexport default AddTask;\\n\",\n       \"generatedFiles\": []\n    },\n    \"/components/TaskChart/TaskChart.js\": {\n      \"code\": \"import React from 'react';\\nimport { Pie } from 'react-chartjs-2';\\nimport {Chart as ChartJS, ArcElement, Tooltip, Legend} from 'chart.js';\\n\\nChartJS.register(ArcElement, Tooltip, Legend);\\n\\nfunction TaskChart({ tasks }) {\\n const completedTasks = tasks.filter(task => task.completed).length;\\n  const pendingTasks = tasks.length - completedTasks;\\n\\n  const data = {\\n    labels: ['Completed', 'Pending'],\\n    datasets: [\\n      {\\n        label: 'Task Status',\\n        data: [completedTasks, pendingTasks],\\n        backgroundColor: ['#36a2eb', '#ff6384'],\\n        hoverOffset: 4,\\n      },\\n    ],\\n  };\\n\\n const options = {\\n    responsive: true,\\n    maintainAspectRatio: false,\\n  };\\n  return (\\n    <div className='bg-white shadow rounded p-4'>\\n      <h2 className='text-xl font-semibold mb-4'>Task Chart</h2>\\n       <div style={{ height: '300px' }}>\\n          <Pie data={data} options={options} />\\n       </div>\\n    </div>\\n  );\\n}\\n\\nexport default TaskChart;\\n\",\n       \"generatedFiles\": []\n    },\n    \"/components/TaskStatistics/TaskStatistics.js\": {\n    \"code\": \"import React from 'react';\\nimport { format } from 'date-fns';\\n\\nfunction TaskStatistics({ tasks }) {\\n const totalTasks = tasks.length;\\n  const completedTasks = tasks.filter(task => task.completed).length;\\n  const pendingTasks = totalTasks - completedTasks;\\n\\n  const getNearestDueDate = () => {\\n    if (tasks.length === 0) return 'No tasks yet';\\n    const validDueDates = tasks\\n      .filter(task => task.dueDate)  // Filter out tasks without due dates\\n      .map(task => new Date(task.dueDate)) // Convert due dates to Date objects\\n      .filter(date => !isNaN(date.getTime())) // Filter out invalid dates\\n      .sort((a, b) => a - b); // Sort dates in ascending order\\n    if(validDueDates.length === 0 ) return 'No due date';\\n    return format(validDueDates[0], 'MM/dd/yyyy');\\n  };\\n\\n\\n  return (\\n    <div className=\\\"bg-white shadow rounded p-4 mt-4\\\">\\n      <h2 className=\\\"text-xl font-semibold mb-4\\\">Statistics</h2>\\n       <div className='grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4'>\\n         <div className=\\\"p-4 rounded border bg-blue-50\\\">\\n           <h3 className=\\\"text-lg font-bold text-blue-700\\\">Total Tasks</h3>\\n           <p className=\\\"text-3xl font-bold text-gray-800 mt-2\\\">{totalTasks}</p>\\n         </div>\\n        <div className=\\\"p-4 rounded border bg-green-50\\\">\\n          <h3 className=\\\"text-lg font-bold text-green-700\\\">Completed Tasks</h3>\\n           <p className=\\\"text-3xl font-bold text-gray-800 mt-2\\\">{completedTasks}</p>\\n        </div>\\n         <div className=\\\"p-4 rounded border bg-red-50\\\">\\n           <h3 className=\\\"text-lg font-bold text-red-700\\\">Pending Tasks</h3>\\n           <p className=\\\"text-3xl font-bold text-gray-800 mt-2\\\">{pendingTasks}</p>\\n        </div>\\n        <div className=\\\"p-4 rounded border bg-yellow-50\\\">\\n           <h3 className=\\\"text-lg font-bold text-yellow-700\\\">Nearest Due Date</h3>\\n           <p className=\\\"text-xl font-bold text-gray-800 mt-2\\\">{getNearestDueDate()}</p>\\n         </div>\\n       </div>\\n    </div>\\n  );\\n}\\n\\nexport default TaskStatistics;\\n\",\n       \"generatedFiles\": []\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/Header/Header.js\",\n    \"/components/TaskList/TaskList.js\",\n    \"/components/AddTask/AddTask.js\",\n    \"/components/TaskChart/TaskChart.js\",\n     \"/components/TaskStatistics/TaskStatistics.js\"\n  ]\n}\n```\n"},
          ],
        },
      ],
    })
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
  